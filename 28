62:发现不会写二维数组，对于初始化也有点忘了
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0] * n for _ in range(m)]

        # 初始化
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1

        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i][j-1] + dp[i-1][j]

        return dp[m-1][n-1]

63:
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        # 行数
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        # 列数
        dp = [[0] * n for _ in range(m)]
        # 如果开头和终点有障碍直接返回0
        if obstacleGrid[0][0] == 1:
            return 0
        if obstacleGrid[m-1][n-1] == 1:
            return 0
        # 行和列有障碍也跳过
        for i in range(m):
            if obstacleGrid[i][0] == 0:
                dp[i][0] = 1
            else:
                break

        for j in range(n):
            if obstacleGrid[0][j] == 0:
                dp[0][j] = 1

            else:
                break
        # 遍历和递推公式
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 1:
                    continue

                dp[i][j] = dp[i-1][j] + dp[i][j-1]

        return dp[m-1][n-1]
        比1难了很多，关于初始化的判断，最后人已经晕了
