day1 数组：
二分法：关键在于左闭右开左闭右闭边界问题，middle<target 还是<=,影响到后面right=middle还是=middle-1
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)-1
        while left <= right:
            middle = (right + left)//2
            if nums[middle] < target:
                left = middle + 1
            elif nums[middle] > target:
                right = middle - 1
            else:
                return middle
        return -1
        
移除元素：这里的双指针就是把需要的元素放到一个新数组，想了半天怎么num[i]=val要怎么办，还是没写出来
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        
        k = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] = nums[i]
                k += 1
        return k
有序数组平方：暴力出来了，指针的时候自己双指针的思想对了，但没有把结果放在新数组，导致完全乱序
          这是错误代码：
          class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        i, j = 0, len(nums)-1
        while i <= j:
            if nums[i]**2 < nums[j]**2:
                nums[j] = nums[j]**2
                j -= 1
            elif nums[i]**2 > nums[j]**2:
                nums[j] = nums[i]**2
                i += 1
        return nums
        这是正确：
                  class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        i, j = 0, len(nums)-1
        res = []
        while i <= j:
            if nums[i]**2 < nums[j]**2:
                res.append(nums[j]**2)
                j -= 1
            else:
                res.append(nums[i]**2)
            
                i += 1
        res.reverse()
        return res
        最后的新数组也可以用res=[0]* len(range)
          pos = len(range)-1
          然后每次pos-1
          
