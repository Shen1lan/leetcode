518:
递推公式都差不多，就是初始化的时候需要注意，然后遍历顺序也要注意
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        n = len(coins)
        dp = [[0] * (amount + 1) for _ in range(n + 1)]

        for i in range(n+1):
            dp[i][0] = 1

        for i in range(1, n+1):
            coin = coins[i-1]

            for j in range(amount+1):
                dp[i][j] = dp[i-1][j]
                if j >= coin:
                    dp[i][j] += dp[i][j-coin] 

        return dp[n][amount]

377:
排列的又不会了
class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        n = len(nums)
        dp = [[0] * (target + 1) for _ in range(n)]

        for i in range(n):
            dp[i][0] = 1

        for j in range(1, target + 1):
            for i in range(n):
                if j >= nums[i]:
                    dp[i][j] = dp[i-1][j] + dp[-1][j-nums[i]]

                else:
                    dp[i][j] = dp[i-1][j]

        return dp[-1][-1]


