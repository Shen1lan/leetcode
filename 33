打家劫舍：
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0

        if len(nums) == 1:
            return nums[0]

        dp = [0] * len(nums)
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])

        for i in range(2, len(nums)):
            dp[i] = max(dp[i-1], dp[i-2]+nums[i])

        return dp[-1]比较简单，边界问题想了一下

打家劫舍2比1难，思路没想到，然后要递归，各种情况也要考虑
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0

        if len(nums) == 1:
            return nums[0]
        res1 = self.back(nums, 0, len(nums)-2)
        res2 = self.back(nums, 1, len(nums)-1)
        return max(res1, res2)

    def back(self, nums, start, end):

        if start == end:
            return nums[start]

        pre = nums[start]
        cur = max(nums[start], nums[start+1])

        for i in range(start+2, end+1):
            temp = cur
            cur = max(pre+nums[i], cur)
            pre = temp

        return cur
