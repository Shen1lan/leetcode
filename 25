射气球：局部最优总感觉有反例，但找不出
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        if len(points) == 0:
            return 0
        res = 1
        points.sort(key=lambda x: x[0])

        for i in range(1, len(points)):
            if points[i][0] > points[i-1][1]:
                res += 1

            else:
                points[i][1] = min(points[i-1][1], points[i][0])

        return res
没有重合区间：
class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        if len(intervals) == 0:
            return 0

        intervals.sort(key = lambda x:x[0])
        count = 0

        for i in range(1, len(intervals)):
            if intervals[i][0] < intervals[i-1][1]:
                intervals[i][1] = min(intervals[i][1], intervals[i-1][1])
                count +=1

        return count思路差不多类似

划分字母区间：
class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        last = {}
        for i, ch in enumerate(s):
            last[ch] = i

        end = 0
        start = 0
        res = []

        for i , ch in enumerate(s):
            end = max(end, last[ch])
            if end == i:
                res.append(end-start+1)

            
                start = i+1

        return res这个更难一点，要先找到每个字母的最大，然后找区间的最大
