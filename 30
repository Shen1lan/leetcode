dp好难，没啥思路
1049:
class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        dp = [0] * 15001
        totsum = sum(stones)
        target = totsum // 2

        for stone in stones:
            for j in range(target, stone-1, -1):
                dp[j] = max(dp[j], dp[j-stone] + stone)

        return totsum - 2 * dp[target]


494:
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        totsum = sum(nums)
        if abs(target) > totsum:
            return 0

        if (target + totsum) % 2 == 1:
            return 0

        tarsum = (target + totsum) // 2

        dp = [0] * (tarsum + 1)
        dp[0] = 1
        for num in nums:
            for j in range(tarsum, num - 1, -1):
                dp[j] += dp[j - num]

        return dp[tarsum]
