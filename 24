买股票：
居然可以分解为每天的情况，然后运用贪心
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        res = 0
        for i in range(1, len(prices)):
            if prices[i] - prices[i-1] > 0:
                res += prices[i] - prices[i-1]

        return res

跳跃：
思考每步的最大范围，最后nums[i]+i是可到达最远范围
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        far = nums[0]

        for i in range(len(nums)):
            if i > far:
                return False

            far = max(far, nums[i]+i)

        return True
class Solution:
    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:
        nums.sort(key=lambda x: abs(x), reverse=True)

        for i in range(len(nums)):
            if nums[i] < 0 and k > 0:
                nums[i] *= -1
                k -= 1

        if k % 2 == 1:
            nums[-1] *= -1
        res = sum(nums)
        return res这个贪心思维不太好理解，先负数变为正数局部，然后最小话损失局部
