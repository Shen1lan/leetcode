188:递推公式很难想
而且表示的是状态，很虚幻
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if len(prices) == 0:
            return 0

        dp = [0 * (2*k + 1) for _ in range(len(prices))]

        for j in range(1, 2*k, 2):
            dp[0][j] = -prices[0]

        for i in range(1, len(prices)):
            for j in range(0, 2*k-1, 2):
                dp[i][j+1] = max(dp[i-1][j-1], dp[i][j-1]-prices[i])
                dp[i][j+2] = max(dp[i-1][j+2], dp[i-1][j+1]+prices[i])

        return dp[-1][2*k]

309:
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) == 0:
            return 0

        dp = [[0] * 4 for _ in range(len(prices))]

        dp[0][0] = -prices[0]

        for i in range(1, len(prices)):
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][1], dp[i-1][3])- prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][3])
            dp[i][2] = dp[i-1][0] + prices[i]
            dp[i][3] = dp[i-1][2]
        n = len(prices)
        return max(dp[n-1][1], dp[n-1][2], dp[n-1][3])这个递推公式也很难


714:比较简单
class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        if len(prices) == 0:
            return 0

        dp = [[0]*2 for _ in range(len(prices))]
        dp[0][0] = -prices[0]
        for i in range(1, len(prices)):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i])

            dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]-fee)

        return max(dp[-1][1], dp[-1][0])
